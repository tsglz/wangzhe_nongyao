// std::string waitForInput(Hero *hero, Hero *enemy)
// 


//     // ?????????§Ö?????????
//     std::thread input_thread([&t, &input_mutex]()
//                              {
//         std::string input;
//         std::cout << "???????¦Ê??????????????: ";
//         std::getline(std::cin, input); // ??????????
//         // ???????????????
//         std::lock_guard<std::mutex> lock(input_mutex);
//         t.Stop();
//         return input; });

//     // ??????????§µ????????????
//     // ???????§»?????????????????????????????????????????
//     std::this_thread::sleep_for(std::chrono::seconds(3));
//     std::cout << "Stopping timer..." << std::endl;

//     // ??3???????????????????
//     // ????????????? Stop()????????????????????????????

//     // ?????????????
//     input_thread.join();

//     // ??????????????
//     std::this_thread::sleep_for(std::chrono::seconds(5));
//     std::cout << "Function ends." << std::endl;
//     return input;
// }

// // // ????????§Ø??????
// // t.StartTimer(1000, std::bind(EchoFunc, "hello world!"));
// // std::this_thread::sleep_for(std::chrono::seconds(4));
// // std::cout << "try to expire timer!" << std::endl;
// // t.Expire();

// // // ????????§Ø??????
// // t.StartTimer(1000, std::bind(EchoFunc, "hello c++11!"));
// // std::this_thread::sleep_for(std::chrono::seconds(4));
// // std::cout << "try to expire timer!" << std::endl;
// // t.Expire();

// // std::this_thread::sleep_for(std::chrono::seconds(2));

// // ??????¦Æ??????
// // ???
// // t.SyncWait(1000, EchoFunc, "hello world!");
// // ??

// // std::this_thread::sleep_for(std::chrono::seconds(2));
